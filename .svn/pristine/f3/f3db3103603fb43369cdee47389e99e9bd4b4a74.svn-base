package kr.or.ddit.bnb.reservation.serveice;

import java.sql.SQLException;
import java.util.List;
import java.util.Map;

import com.ibatis.sqlmap.client.SqlMapClient;

import kr.or.ddit.bnb.prod.vo.ProdVO;
import kr.or.ddit.bnb.reservation.dao.IReservationDao;
import kr.or.ddit.bnb.reservation.dao.ReservationDaoImpl;
import kr.or.ddit.util.SqlMapClientFactory;

public class ReservationServiceImpl implements IReservationService{

	private IReservationDao dao;
	private SqlMapClient smc;
	
	//싱글톤패턴
	private static ReservationServiceImpl service;
	private ReservationServiceImpl() {
		dao = ReservationDaoImpl.getInstance();
		smc = SqlMapClientFactory.getsqlMapClient();
	}
	public static ReservationServiceImpl getInstance() {
		if(service == null) service = new ReservationServiceImpl();
		return service;
	}
	
	//검색 시작시 위치 자동완성반환
	//주소 검색시 관련 검색어 노출되도록 like 연산자 사용
	//예) '제주' 검색 시, 제주와 관련된 항목 노출
	//servlet에서 상세주소는 자르고 노출하는 작업이 필요함.
	@Override
	public List<ProdVO> locationReturn(String addr) {
		List<ProdVO> list = null;
		
		try {
			list = dao.locationReturn(smc, addr);
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		return list;
	}
	
	//숙소목록 검색
	//파라미터 맵 : 위치(String)[, 체크인 날짜(date), 체크아웃 날짜(date), 인원수(int)]
	//[ ]는 동적쿼리 처리(값이 있을 경우만 사용)
	@Override
	public List<ProdVO> searchProd(Map<String, Object> map) {
		List<ProdVO> list = null;
		
		try {
			list = dao.searchProd(smc, map);
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		return list;
	}
	
	//목록에서 필터링
	//파라미터 맵 : 위치(String)[, 체크인 날짜(date), 체크아웃 날짜(date), 인원수(int), 금액(int), 타입(String), 파트(String)]
	//[ ]는 동적쿼리 처리(값이 있을 경우만 사용)
	@Override
	public List<ProdVO> filter(Map<String, Object> map) {
		List<ProdVO> list = null;
		
		try {
			list = dao.filter(smc, map);
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		return list;
	}

}
